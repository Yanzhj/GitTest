<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MDF.Framework</name>
    </assembly>
    <members>
        <member name="T:MDF.Framework.AnonymousType">
            <summary>
            A convenient method of accessing the values of an 
            anonymous type without needing to define a separate class
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.#ctor(System.Object)">
            <summary>
            Creates a new Anonymous type from the value provided
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.#ctor">
            <summary>
            Creates an empty Anonymous Type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Create(System.Object)">
            <summary>
            Creates a new anonymous type from the object provided
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Create">
            <summary>
            Creates an empty anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Call(System.String)">
            <summary>
            Attempts to execute a method that has been added to this type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Call(System.String,System.Object[])">
            <summary>
            Attempts to execute a method with parameters that has been added to this type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Call``1(System.String)">
            <summary>
            Attempts to execute a method that has been added to this type and return the value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Call``1(System.String,System.Object[])">
            <summary>
            Attempts to execute a method with parameters that has been added to this type and return the value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Has(System.String)">
            <summary>
            Checks if this Anonymous Type has the specified property
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Get``1(System.String)">
            <summary>
            Finds the property and returns the value.
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Get``1(System.String,``0)">
            <summary>
            Finds the property and returns the value. If no value was found, 
            the default value is returned instead.
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Set(System.String,System.Object)">
            <summary>
            Sets the value of a property on an anonymous type
            </summary>
            <remarks>Anonymous types are read-only - this saves a value to another location</remarks>
        </member>
        <member name="M:MDF.Framework.AnonymousType.Set``1(System.String,``0)">
            <summary>
            Sets the value of a property on an anonymous type
            </summary>
            <remarks>Anonymous types are read-only - this saves a value to another location</remarks>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod(System.String,System.Action)">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``1(System.String,MDF.Framework.WithAction{``0})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``2(System.String,MDF.Framework.WithAction{``0,``1})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``3(System.String,MDF.Framework.WithAction{``0,``1,``2})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``4(System.String,MDF.Framework.WithAction{``0,``1,``2,``3})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``5(System.String,MDF.Framework.WithAction{``0,``1,``2,``3,``4})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``6(System.String,MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``7(System.String,MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``8(System.String,MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``9(System.String,MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``10(System.String,MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Appends a lambda as a function to this anonymous type
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``1(System.String,System.Func{``0})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``2(System.String,MDF.Framework.WithResultAction{``0,``1})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``3(System.String,MDF.Framework.WithResultAction{``0,``1,``2})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``4(System.String,MDF.Framework.WithResultAction{``0,``1,``2,``3})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``5(System.String,MDF.Framework.WithResultAction{``0,``1,``2,``3,``4})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``6(System.String,MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``7(System.String,MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``8(System.String,MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``9(System.String,MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``10(System.String,MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.SetMethod``11(System.String,MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Appends a lambda as a function to this anonymous type that returns a value
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``1(MDF.Framework.WithAction{``0})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``2(MDF.Framework.WithAction{``0,``1})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``3(MDF.Framework.WithAction{``0,``1,``2})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``4(MDF.Framework.WithAction{``0,``1,``2,``3})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``5(MDF.Framework.WithAction{``0,``1,``2,``3,``4})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``6(MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``7(MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``8(MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``9(MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``10(MDF.Framework.WithAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``2(MDF.Framework.WithResultAction{``0,``1})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``3(MDF.Framework.WithResultAction{``0,``1,``2})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``4(MDF.Framework.WithResultAction{``0,``1,``2,``3})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``5(MDF.Framework.WithResultAction{``0,``1,``2,``3,``4})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``6(MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``7(MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``8(MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``9(MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``10(MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType.With``11(MDF.Framework.WithResultAction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Maps each variable name to a matching property then calls the 
            provided delegate with the parameters. This method IS case-sensitive
            </summary>
        </member>
        <member name="M:MDF.Framework.AnonymousType._Invoke(System.Delegate)">
            <summary>
            Invokes a delegate method using the name and type mappings to the correct
            type in the anonymous type
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`1">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`2">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`3">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`4">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`5">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`6">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`7">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`8">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`9">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithAction`10">
            <summary>
            Delegate to be used with AnonymousType.With
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`2">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`3">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`4">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`5">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`6">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`7">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`8">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`9">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`10">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.WithResultAction`11">
            <summary>
            Delegate to be used with AnonymousType.With but also returns a result
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.ConstInfoConverter">
            <summary>
            信息交换类型敞亮
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.ConstInfoConverter.KnownType">
            <summary>
            数值类型交换
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.ExpressionExecute">
            <summary>
            表达式执行
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.ExpressionExecute.Excute(MDF.Framework.Bus.MethodExpressionInfo)">
            <summary>
            执行表达式
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.ExpressionSyntax">
            <summary>
            方法调用表达式，将方法调用的表达式转化为数据类型<see cref="T:MDF.Framework.Bus.MethodExpressionInfo"/>,在程序之间进行信息
            传递，例如在表现层与业务逻辑层进行调用方法的消息传递。
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-2-19</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MDF.Framework.Bus.ExpressionSyntax.GetExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            针对有返回值的方法，将方法调用表达式转换为数据，并将数据跨程序域传递
            </summary>
            <typeparam name="TType">调用的方法的类或接口类型</typeparam>
            <param name="expresion">要传递的表达式</param>
            <returns>方法调用信息</returns>
        </member>
        <member name="M:MDF.Framework.Bus.ExpressionSyntax.GetExpression``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            针对有无返回值的方法，将方法调用表达式转换为数据，并将数据跨程序域传递
            </summary>
            <typeparam name="TType">调用的方法的类或接口类型</typeparam>
            <param name="expresion">要传递的表达式</param>
            <returns>方法调用信息</returns>
        </member>
        <member name="M:MDF.Framework.Bus.ExpressionSyntax.GetJsonExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            将表达式转换为Json
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="expresion"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.ExpressionSyntax.TransferInfo(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            方法表达式解析
            </summary>
            <param name="ex">要解析的表达式</param>
            <returns>方法调用信息</returns>
        </member>
        <member name="M:MDF.Framework.Bus.ExpressionSyntax.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            根据表达式获取方法
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="expresion"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.MethodExpressionInfo">
            <summary>
            方法调用信息
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MethodExpressionInfo.ReturnType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MethodExpressionInfo.ObjectName">
            <summary>
            调用对象名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MethodExpressionInfo.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MethodExpressionInfo.Paras">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MethodExpressionInfo.ParaValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.IBusinessService">
            <summary>
            业务处理服务接口
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.IBusinessService.ProcessMultRequest(System.String[])">
            <summary>
            处理多个请求
            </summary>
            <param name="requestJson"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.IBusinessService.ProcessRequest(System.String)">
            <summary>
            处理请求
            </summary>
            <param name="requestJson"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.IInfoConverter">
            <summary>
            信息转换
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.IInfoConverter.Convert(System.Object)">
            <summary>
            将对象转换为字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.IInfoConverter.ConvertBack(System.Type,System.String)">
            <summary>
            将信息转换为某对象
            </summary>
            <param name="type">要转换的类型</param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.IKownType">
            <summary>
            数值类型
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.IMessageService">
            <summary>
            消息服务
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.IMessageService.ReceiveMessage">
            <summary>
            接收消息
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.IMessageService.Register">
            <summary>
            注册消息客户端
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.IMessageService.CancelRegister">
            <summary>
            取消对消息服务的注册
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.IMessageClientCallBack">
            <summary>
            消息客户端回调
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.IMessageClientCallBack.PublishMessage">
            <summary>
            发布消息
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.InfoExchangeSettings">
            <summary>
            信息交换设置
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.InfoExchangeSettings.Default">
            <summary>
            默认的信息交换设置
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.InfoExchangeSettings.KnownTypeBinder">
            <summary>
            熟知类型信息交换设置
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.InfoExchangeSettings.TypeBinder">
            <summary>
            类型绑定信息交换设置
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.InfoExchangeSettings.PreserveReferences">
            <summary>
            预处理信息交换设置
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.InfoExchange">
            <summary>
            信息交换，负责将数据对象转换为Json字符串，或将Json字符串转换为数据对象
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-1-18 16:07</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:MDF.Framework.Bus.InfoExchange.KnownTypesBinder">
            <summary>
            熟知类型绑定
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.InfoExchange.SetingsDefault">
             <summary>
            默认信息交换设置 
             </summary>
        </member>
        <member name="F:MDF.Framework.Bus.InfoExchange.SetingsKonwnTypesBinder">
            <summary>
            熟知类型信息交换设置
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchange.ConvertToJson(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            将对象转换为Json字符串
            <remarks>
            <example>将对象转换为带有熟知类型的Json串(Json带有对象的类型$type:)
            <code>
            var obj = new Measure() { Cd = "001", Name = "公斤", IsUsed = true };
            var json = InfoExchange.ConvertToJson(obj, InfoExchange.SetingsKonwnTypesBinder);
            </code>
            </example>
            </remarks>
            </summary>
            <param name="obj">要转换的对象</param>
            <param name="settings">转换设置</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchange.DeConvert(System.Type,System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            将Json字符串转换为对象
            <example>
            <code>
            var obj = new Measure() { Cd = "001", Name = "公斤", IsUsed = true };
            var json = InfoExchange.ConvertToJson(obj, InfoExchange.SetingsKonwnTypesBinder);
            var newObj = InfoExchange.DeConvert(typeof(Measure), json, InfoExchange.SetingsKonwnTypesBinder);
            </code>
            </example>
            </summary>
            <param name="type">要转换成的类型</param>
            <param name="json">要转换的Json串</param>
            <param name="settings">转换设置</param>
            <returns>转换成的对象</returns>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchange.DeConvert``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <typeparam name="T">泛型参数</typeparam>
            <param name="json">Json字符串</param>
            <param name="settings">转换设置</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchange.ConvertToJson(System.Object)">
            <summary>
            将对象转换为Json字符串
            </summary>
            <param name="obj">要转换的对象</param>
            <returns>Json串</returns>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchange.DeConvert(System.Type,System.String)">
            <summary>
            将Json串转换为特定类型的对象
            </summary>
            <param name="type">对象类型</param>
            <param name="json">Json串</param>
            <returns>实例对象</returns>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchange.DeConvert``1(System.String)">
            <summary>
            将Json串转换为特定类型的对象
            </summary>
            <param name="json">Json串</param>
            <returns>实例对象</returns>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchange.ToDictionary(Newtonsoft.Json.Linq.JObject)">
            <summary>
            将JObject转换为
            </summary>
            <param name="jObj"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchange.ToListDictionary(Newtonsoft.Json.Linq.JArray)">
            <summary>
            将Jarray转换为List
            </summary>
            <param name="jArray"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.InfoExchangeAllParasAttribute">
            <summary>
            方法中的参数使用的信息交换类型
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.InfoExchangeAttribute">
            <summary>
            信息交换属性
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchangeAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="converterType"></param>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchangeAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="converterName"></param>
        </member>
        <member name="P:MDF.Framework.Bus.InfoExchangeAttribute.ConverterType">
            <summary>
            转换类型
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.InfoExchangeAttribute.ConverterName">
            <summary>
            转换器名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.InfoExchangeAttribute.Converter">
            <summary>
            转换器
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchangeAllParasAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="converterType">信息交换类型</param>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchangeAllParasAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="converterName">转换器的名称</param>
        </member>
        <member name="T:MDF.Framework.Bus.InfoExchangeParaAttribute">
            <summary>
            信息交换参数属性
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.InfoExchangeReturnAttribute">
            <summary>
            将方法返回的内容转换为成指定的内容
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchangeReturnAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="converterType"></param>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchangeReturnAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="converterName"></param>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchangeParaAttribute.#ctor(System.String,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="parameterName"></param>
            <param name="ConverterType"></param>
        </member>
        <member name="M:MDF.Framework.Bus.InfoExchangeParaAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="parameterName"></param>
            <param name="converterName"></param>
        </member>
        <member name="P:MDF.Framework.Bus.InfoExchangeParaAttribute.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.IServiceRequestProcess">
            <summary>
            服务请求处理接口
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.IServiceRequestProcess.Process(MDF.Framework.Bus.ServiceRequest)">
            <summary>
            处理请求
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.JsonKnownTypeInfoConverter">
            <summary>
            数值类型转换
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.JsonKnownTypeInfoConverter.Convert(System.Object)">
            <summary>
            转换Json串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonKnownTypeInfoConverter.ConvertBack(System.Type,System.String)">
            <summary>
            将Json转换为某类型的对象
            </summary>
            <param name="type"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.JsonToDictionary">
            <summary>
            Json转换为Dictionary对象
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.Add(System.String,System.Object)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.ContainsKey(System.String)">
            <summary>
            是否包含
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            获取键值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            添加
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            是否包含
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            复制
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            移除
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.GetEnumerator">
            <summary>
            返回循环访问枚举值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取成员
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            设置成员
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Bus.JsonToDictionary.Item(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="E:MDF.Framework.Bus.JsonToDictionary.PropertyChanged">
            <summary>
            属性改变事件
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.JsonToDictionary.Keys">
            <summary>
            所有键值
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.JsonToDictionary.Values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.JsonToDictionary.Count">
            <summary>
            数目
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.JsonToDictionary.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.JsonToDictionaryConverter">
            <summary>
            将Json转换为Dictionary
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionaryConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionaryConverter.CanConvert(System.Type)">
            <summary>
            是否可转换
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取Json串
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.JsonToDictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写Json
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:MDF.Framework.Bus.KnownTypesBinder">
            <summary>
            孰知类型绑定
            addedy by changhl,2014-5-13
            孰知类型绑定是指在信息交换时，为保证Json正确转换为
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.KnownTypesBinder.BindToType(System.String,System.String)">
            <summary>
            绑定到熟知类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.KnownTypesBinder.RegistTypes">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.KnownTypesBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            绑定熟知类型到Name
            </summary>
            <param name="serializedType"></param>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:MDF.Framework.Bus.KnownTypesBinder.RegistAssembly(System.Reflection.Assembly)">
            <summary>
            注册程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:MDF.Framework.Bus.KnownTypesBinder.RegistType(System.Type)">
            <summary>
            注册类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:MDF.Framework.Bus.MethodCallExpressionVisitor">
            <summary>
             Parser the MethodcallExpression by the visitor
             addedy by changhl,2013-11-19
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.MethodCallExpressionVisitor.Parse(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Parse the MethodCallExpression To  
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.ObjectFactory">
            <summary>
            对象创建工厂
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-1-18 16:07</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:MDF.Framework.Bus.ObjectFactory.RunLibPaths">
            <summary>
            程序集扩展路径
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.ObjectFactory.configurationLocations">
            <summary>
            spring配置文件
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.ObjectFactory.ctx">
            <summary>
            应用程序对应的类型
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.GetContext">
            <summary>
            获取上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.GetObjects``1">
            <summary>
            获取Ioc容器中的对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.GetObject``1">
            <summary>
            获取注册的对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.GetObject``1(System.String)">
            <summary>
            根据注册的对象名称获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.Invoke``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            调用方法
            </summary>
            <typeparam name="T">调用的类型</typeparam>
            <param name="objName">对象名称</param>
            <param name="expresion">表达式</param>
            <returns>调用方法返回结果</returns>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.Invoke``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            调用方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expresion"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.Config(System.String)">
            <summary>
            配置总线
            </summary>
            <param name="configFile"></param>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.Config">
            <summary>
            根据承载的应用程序的配置文件配置服务总线
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.CreateTypeProxy">
            <summary>
            创建类型代理
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.ObjectFactory.ParseAssemblys">
            <summary>
            解析程序集，注册熟知类型
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.IObjectContainer">
            <summary>
            对象工厂
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.IObjectContainer.GetObject``1(System.String)">
            <summary>
            根据协议名称获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.IObjectContainer.GetObject``1">
            <summary>
            获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.IObjectContainer.GetObjects``1">
            <summary>
            获取对象集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.IObjectContainer.GetObjects``1(System.String)">
            <summary>
            根据协议名称获取所有对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Bus.MefObjectContainer">
            <summary>
            MEF工厂
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.MefObjectContainer.#ctor">
            <summary>
            无参构造函数，默认读取应用目录下的程序集
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.MefObjectContainer.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="paths">对应的其它目录</param>
        </member>
        <member name="M:MDF.Framework.Bus.MefObjectContainer.GetObject``1">
            <summary>
            获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.MefObjectContainer.GetObject``1(System.String)">
            <summary>
            根据协议获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.MefObjectContainer.GetObjects``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.MefObjectContainer.GetObjects``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Bus.MefObjectContainer.Container">
            <summary>
            MEF容器
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.SpringObjectContainer">
            <summary>
            Spring对象容器
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.SpringObjectContainer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.SpringObjectContainer.#ctor(System.String[])">
            <summary>
            根据配置文件地址初始化容器
            </summary>
            <param name="configurationLocations"></param>
        </member>
        <member name="M:MDF.Framework.Bus.SpringObjectContainer.#ctor(Spring.Context.IApplicationContext,System.String[])">
            <summary>
            初始化Spring容器
            </summary>
            <param name="parentContext"></param>
            <param name="configurationLocations"></param>
        </member>
        <member name="M:MDF.Framework.Bus.SpringObjectContainer.GetObject``1(System.String)">
            <summary>
            根据对象名称获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.SpringObjectContainer.GetObject``1">
            <summary>
            获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.SpringObjectContainer.GetObjects``1">
            <summary>
            获取对象集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.SpringObjectContainer.GetObjects``1(System.String)">
            <summary>
            获取对象集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Bus.SpringObjectContainer.Ctx">
            <summary>
            
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.ProcessRequest">
            <summary>
            处理请求
            </summary>
        </member>
        <member name="F:MDF.Framework.Bus.ProcessRequest.proxys">
            <summary>
            服务类型代理
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.ProcessRequest.Process(System.String)">
            <summary>
            处理Json串
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.ProcessRequest.Process(MDF.Framework.Bus.RequestBody)">
            <summary>
            处理请求
            addedy by changhl,2013-11-19
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.ProcessRequest.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.ServiceProxyType">
            <summary>
            服务类型的代理
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.ServiceProxyType.#ctor(System.Type)">
            <summary>
            构造函数，创建代理
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceProxyType.Name">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceProxyType.Type">
            <summary>
            lq 
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.MethodProxy">
            <summary>
            方法代理
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.MethodProxy.#ctor(System.Reflection.MethodInfo)">
            <summary>
            方法代理
            </summary>
            <param name="method"></param>
        </member>
        <member name="P:MDF.Framework.Bus.MethodProxy.Method">
            <summary>
            方法
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MethodProxy.ParaAttributes">
            <summary>
            参数属性
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MethodProxy.ReturnAttribute">
            <summary>
            返回属性
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MethodProxy.AllParasAttribute">
            <summary>
            所有参数属性
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.ServiceMessage">
            <summary>
            服务消息
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceMessage.SenderUerId">
            <summary>
            消息发送人
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceMessage.ReceiveUsedIds">
            <summary>
            消息接收人
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceMessage.InfoMessage">
            <summary>
            要传递的消息
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.ServiceMonitor">
            <summary>
            服务监控
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.ServiceMonitor.Instance">
            <summary>
            单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Bus.ServiceMonitor.AddMonitorInfo(MDF.Framework.Bus.MonitorInfo)">
            <summary>
            添加监控信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceMonitor.Infos">
            <summary>
            监控信息
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceMonitor.IsMonitor">
            <summary>
            是否监控
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.MonitorInfo">
            <summary>
            服务端监控
            </summary>
        </member>
        <member name="T:MDF.Framework.Model.NotifyObject">
            <summary>
            通知对象
            </summary>
        </member>
        <member name="T:MDF.Framework.Model.IRaisePropertyChanged">
            <summary>
            属性值改变接口
            </summary>
        </member>
        <member name="M:MDF.Framework.Model.IRaisePropertyChanged.RaisePropertyChanged(System.String)">
            <summary>
            激发属性改变
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:MDF.Framework.Model.IRaisePropertyChanged.RaisedPropertiesChanged">
            <summary>
            激发所有属性改变
            </summary>
        </member>
        <member name="T:MDF.Framework.IRaiseErrorChanged">
            <summary>
            激发错误改变接口
            </summary>
        </member>
        <member name="T:MDF.Framework.INotifyDataErrorInfo">
            <summary>
            通知数据错误信息
            </summary>
        </member>
        <member name="M:MDF.Framework.INotifyDataErrorInfo.GetErrors(System.String)">
            <summary>
            获取错误信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="E:MDF.Framework.INotifyDataErrorInfo.ErrorsChanged">
            <summary>
            错误信息改变事件
            </summary>
        </member>
        <member name="P:MDF.Framework.INotifyDataErrorInfo.HasErrors">
            <summary>
            是否有错误信息
            </summary>
        </member>
        <member name="M:MDF.Framework.IRaiseErrorChanged.RaiseErrorChanged(System.String)">
            <summary>
            激发错误
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:MDF.Framework.IRaiseErrorChanged.ClearErrors(System.String)">
            <summary>
            清除错误
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:MDF.Framework.IRaiseErrorChanged.AddError(System.String,System.String)">
            <summary>
            添加错误
            </summary>
            <param name="propertyName"></param>
            <param name="error"></param>
        </member>
        <member name="M:MDF.Framework.IRaiseErrorChanged.ClearErrors">
            <summary>
            清除所有错误
            </summary>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.RaisePropertyChanged(System.String)">
            <summary>
            激发属性改变事件
            </summary>
            <param name="propteryName"></param>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.RaisePropertyChanged(System.String[])">
            <summary>
            激发多个属性改变事件
            </summary>
            <param name="propertyNames"></param>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            激发属性改变事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.RaisedPropertiesChanged">
            <summary>
            激发所有属性改变的事件
            </summary>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.GetErrors(System.String)">
            <summary>
            获取错误信息
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.RaiseErrorChanged(System.String)">
            <summary>
            激发错误改变
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.ClearErrors(System.String)">
            <summary>
            清除错误
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.AddError(System.String,System.String)">
            <summary>
            添加错误
            </summary>
            <param name="propertyName"></param>
            <param name="error"></param>
        </member>
        <member name="M:MDF.Framework.Model.NotifyObject.ClearErrors">
            <summary>
            清除错误
            </summary>
        </member>
        <member name="E:MDF.Framework.Model.NotifyObject.PropertyChanged">
            <summary>
            属性改变事件
            </summary>
        </member>
        <member name="E:MDF.Framework.Model.NotifyObject.ErrorsChanged">
            <summary>
            错误改变事件
            </summary>
        </member>
        <member name="P:MDF.Framework.Model.NotifyObject.HasErrors">
            <summary>
            是否有错误
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.UserName">
            <summary>
            调用人
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.IpAdress">
            <summary>
            调用的Ip地址
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.StartTime">
            <summary>
            调用开始时间
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.EndTime">
            <summary>
            调用结束时间
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.MethodName">
            <summary>
            调用方法名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.IsSuccess">
            <summary>
            是否调用成功
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.ExceptionMessage">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.StackTrace">
            <summary>
            异常堆栈
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.MonitorInfo.ConsumeTimes">
            <summary>
            调用使用时间
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.ServiceRequest">
            <summary>
            服务请求
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-1-18 16:07</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MDF.Framework.Bus.ServiceRequest.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceRequest.Head">
            <summary>
            请求头
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceRequest.Body">
            <summary>
            请求体
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.RequestHead">
            <summary>
            请求头
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestHead.Address">
            <summary>
            请求服务的浏览器所在电脑的IP地址与端口
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestHead.WebName">
            <summary>
            请求的服务网页名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestHead.RequestPersonId">
            <summary>
            请求人
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestHead.RequestPersonName">
            <summary>
            请求人名称
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.RequestBody">
            <summary>
            请求体
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.RequestBody.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.RequestBody.AddPara(System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Bus.RequestBody.IsReturnWellFormedJson">
            <summary>
            是否返回良构的Json
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestBody.RequestServiceProxy">
            <summary>
            请求的服务代理
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestBody.MethodFullName">
            <summary>
            方法
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestBody.GenericMethodTypes">
            <summary>
            泛型
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestBody.Paras">
            <summary>
            请求的参数
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.RequestPara">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestPara.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestPara.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.RequestPara.ValueType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:MDF.Framework.Bus.ServiceResponse">
            <summary>
            请求回应
            </summary>
        </member>
        <member name="M:MDF.Framework.Bus.ServiceResponse.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceResponse.RequestInfo">
            <summary>
            请求信息
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceResponse.IsSuccess">
            <summary>
            是否成功调用
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceResponse.InfoMessage">
            <summary>
            返回的信息内容，将信息内容转化为Json字符串
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceResponse.ExceptionMessage">
            <summary>
            如果未调用成功，返回异常信息
            </summary>
        </member>
        <member name="P:MDF.Framework.Bus.ServiceResponse.ExceptionCode">
            <summary>
            如果未调用成功，返回MDF自定义异常码
            </summary>
        </member>
        <member name="T:MDF.Framework.DataStruct.Edge`1">
            <summary>
            图的边
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MDF.Framework.DataStruct.Edge`1.Data">
            <summary>
            边对应的数据
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.Edge`1.Pre">
            <summary>
            前序顶点
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.Edge`1.Next">
            <summary>
            后续顶点
            </summary>
        </member>
        <member name="T:MDF.Framework.DataStruct.Graph`1">
            <summary>
            图
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MDF.Framework.DataStruct.Graph`1.edges">
            <summary>
            所有的边
            </summary>
        </member>
        <member name="F:MDF.Framework.DataStruct.Graph`1.nodes">
            <summary>
            所有顶点
            </summary>
        </member>
        <member name="M:MDF.Framework.DataStruct.Graph`1.#ctor(System.Collections.Generic.IEnumerable{MDF.Framework.IRelation{`0}})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.DataStruct.Graph`1.BFSTrace(MDF.Framework.DataStruct.Vertex{`0},System.Boolean)">
            <summary>
            广度优先遍历
            </summary>
        </member>
        <member name="M:MDF.Framework.DataStruct.Graph`1.DfsRecursion(MDF.Framework.DataStruct.Vertex{`0},System.Boolean)">
            <summary>
            深度优先遍历
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MDF.Framework.DataStruct.Graph`1.Intial(System.Collections.Generic.IEnumerable{MDF.Framework.IRelation{`0}})">
            <summary>
            初始化图
            </summary>
            <param name="relations"></param>
        </member>
        <member name="M:MDF.Framework.DataStruct.Graph`1.GetFirst">
            <summary>
            获取图的首顶点
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.DataStruct.Graph`1.GetLast">
            <summary>
            获取图的终结点
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.DataStruct.Graph`1.First">
            <summary>
            首顶点
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.Graph`1.Last">
            <summary>
            最后顶点
            </summary>
        </member>
        <member name="T:MDF.Framework.DataStruct.GraphTraceEventArgs`1">
            <summary>
            图的遍历事件参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MDF.Framework.DataStruct.GraphTraceEventArgs`1.#ctor(MDF.Framework.DataStruct.Vertex{`0})">
            <summary>
            构造函数
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="P:MDF.Framework.DataStruct.GraphTraceEventArgs`1.Vertex">
            <summary>
            对应的顶点
            </summary>
        </member>
        <member name="T:MDF.Framework.DataStruct.LinkedTable`1">
            <summary>
            链表结构
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MDF.Framework.DataStruct.LinkedTable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="collection">对象集合</param>
            <param name="isSort">是否排序</param>
        </member>
        <member name="M:MDF.Framework.DataStruct.LinkedTable`1.InitialSeq(System.Collections.Generic.LinkedListNode{`0},System.Int32)">
            <summary>
            初始化顺序
            </summary>
            <param name="node">初始化开始节点</param>
            <param name="originalSeq">初始化顺序</param>
        </member>
        <member name="M:MDF.Framework.DataStruct.LinkedTable`1.Find(System.Predicate{`0})">
            <summary>
            查找节点
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.DataStruct.TreeNode`1">
            <summary>
            树节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeNode`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeNode`1.#ctor(System.Collections.Generic.IEnumerable{MDF.Framework.IRelation{`0}})">
            <summary>
            构造函数
            </summary>
            <param name="relations">关系</param>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeNode`1.BSFTrace">
            <summary>
            广度优先遍历
            </summary>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeNode`1.BSFTrace(MDF.Framework.DataStruct.TreeNode{`0})">
            <summary>
            广度优先遍历
            </summary>
            <param name="root">要遍历的节点</param>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeNode`1.DsfTrace">
            <summary>
            深度优先遍历整个树
            </summary>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeNode`1.DsfTrace(MDF.Framework.DataStruct.TreeNode{`0})">
            <summary>
            深度优先遍历
            </summary>
            <param name="root">要遍历的节点</param>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeNode`1.Find(`0)">
            <summary>
            查找节点
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeNode`1.Find(System.Predicate{`0})">
            <summary>
            查找数据
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.DataStruct.TreeNode`1.Data">
            <summary>
            节点对应的数据
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.TreeNode`1.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.TreeNode`1.Childs">
            <summary>
            子节点
            </summary>
        </member>
        <member name="E:MDF.Framework.DataStruct.TreeNode`1.OnTraceNode">
            <summary>
            节点遍历时的事件
            </summary>
        </member>
        <member name="T:MDF.Framework.DataStruct.TreeTraceEventArgs`1">
            <summary>
            树遍历节点触发的事件参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MDF.Framework.DataStruct.TreeTraceEventArgs`1.#ctor(MDF.Framework.DataStruct.TreeNode{`0})">
            <summary>
            构造函数
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MDF.Framework.DataStruct.TreeTraceEventArgs`1.Node">
            <summary>
            对应的树节点
            </summary>
        </member>
        <member name="T:MDF.Framework.DataStruct.Vertex`1">
            <summary>
            顶点
            </summary>
        </member>
        <member name="T:MDF.Framework.Identity">
            <summary>
            主键唯一标示
            </summary>
        </member>
        <member name="M:MDF.Framework.Identity.Equals(System.Object)">
            <summary>
            重写Equals方法
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Identity.GetHashCode">
            <summary>
            重写获取哈希Code方法
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Identity.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:MDF.Framework.DataStruct.Vertex`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.Vertex`1.Data">
            <summary>
            顶点对应的顶点
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.Vertex`1.Pres">
            <summary>
            前序边
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.Vertex`1.Nexts">
            <summary>
            后续边
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.Vertex`1.IsFirst">
            <summary>
            是否是首顶点
            </summary>
        </member>
        <member name="P:MDF.Framework.DataStruct.Vertex`1.IsLast">
            <summary>
            是否是最后顶点
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.ICreateDbAdapter">
            <summary>
            适配器创建
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.ICreateDbAdapter.CreateAdapter">
            <summary>
            创建适配器
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.ICreateDbAdapter.ParaPlaceholder">
            <summary>
            参数占位符
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.ICreateDbAdapter.DbConnectionTypeName">
            <summary>
            Db连接类型
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Imp.CreateOracleDbAdapter">
            <summary>
            Oraclev
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.CreateOracleDbAdapter.CreateAdapter">
            <summary>
            创建适配器
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.Imp.CreateOracleDbAdapter.ParaPlaceholder">
            <summary>
            参数占位符
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.Imp.CreateOracleDbAdapter.DbConnectionTypeName">
            <summary>
            数据库连接类型名称
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Imp.CreateSqlDbAdapter">
            <summary>
            创建SqlDbAdapter
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.CreateSqlDbAdapter.CreateAdapter">
            <summary>
            创建适配器
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.Imp.CreateSqlDbAdapter.ParaPlaceholder">
            <summary>
            参数占位符
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.Imp.CreateSqlDbAdapter.DbConnectionTypeName">
            <summary>
            数据库连接类型名称
            </summary>
        </member>
        <member name="T:MDF.Framework.DataErrorsChangedEventArgs">
            <summary>
            数据错误改变事件参数
            </summary>
        </member>
        <member name="M:MDF.Framework.DataErrorsChangedEventArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:MDF.Framework.DataErrorsChangedEventArgs.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.DbParameter">
            <summary>
            Db参数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.DbParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.DbParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.DynamicQueryable">
            <summary>
            动态查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Where
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[]@)">
            <summary>
            Where
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Where
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Select
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            OrderBy
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="ordering"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.OrderBy(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            OrderBy
            </summary>
            <param name="source"></param>
            <param name="ordering"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Take
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Skip
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Object[])">
            <summary>
            GroupBy
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.Any(System.Linq.IQueryable)">
            <summary>
            Any
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicQueryable.Count(System.Linq.IQueryable)">
            <summary>
            Count
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.DynamicClass">
            <summary>
            DynamicClass
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.DynamicClass.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.DynamicProperty">
            <summary>
            DynamicProperty
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:MDF.Framework.Db.DynamicProperty.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.DynamicProperty.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.DynamicExpression">
            <summary>
            DynamicExpression
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.DynamicExpression.Parse(System.Type,System.String,System.Object[])">
            <summary>
            解析
            </summary>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicExpression.ParseLambda(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            ParseLambda
            </summary>
            <param name="itType"></param>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicExpression.ParseLambda(System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            ParseLambda
            </summary>
            <param name="parameters"></param>
            <param name="resultType"></param>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicExpression.ParseLambda``2(System.String,System.Object[])">
            <summary>
            ParseLambda
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="expression"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicExpression.CreateClass(MDF.Framework.Db.DynamicProperty[])">
            <summary>
            CreateClass
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.DynamicExpression.CreateClass(System.Collections.Generic.IEnumerable{MDF.Framework.Db.DynamicProperty})">
            <summary>
            CreateClass
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.ParseException">
            <summary>
            ParseException
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="position"></param>
        </member>
        <member name="M:MDF.Framework.Db.ParseException.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.ParseException.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.ExpressionParser">
            <summary>
            ExpressionParser
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.HqlQuery">
            <summary>
            HQLanguage查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.HqlQuery.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.HqlQuery.SetParas(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            设置查询参数
            </summary>
            <param name="paras"></param>
        </member>
        <member name="M:MDF.Framework.Db.HqlQuery.SetparamsParas(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            设置可变查询参数
            </summary>
            <param name="paras"></param>
        </member>
        <member name="P:MDF.Framework.Db.HqlQuery.Paras">
            <summary>
            设定的查询参数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.HqlQuery.HQLanguage">
            <summary>
            Hibernate查询语言
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.HqlQuery.FirstResult">
            <summary>
            查询的起始行数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.HqlQuery.MaxResult">
            <summary>
            要查询的最大行数
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.HQLanguageBuild">
            <summary>
            动态查询
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.HQLanguageBuild.fromClause">
            <summary>
            from字句
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.HQLanguageBuild.selectClause">
            <summary>
            select 字句
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.HQLanguageBuild.whereClause">
            <summary>
            where字句
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.HQLanguageBuild.onClause">
            <summary>
            on 字句
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.HQLanguageBuild.orderByClause">
            <summary>
            排序字句
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.HQLanguageBuild.groupByClause">
            <summary>
            分组字句
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.From(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            动态组建From字句
            </summary>
            <param name="entiy"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.From``1(System.String)">
            <summary>
            组建From字句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.From(System.String,System.String)">
            <summary>
            from
            </summary>
            <param name="entityName"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.SelfJoin(MDF.Framework.Db.JoinType,System.String,System.String)">
            <summary>
            Join字句
            </summary>
            <param name="joinType"></param>
            <param name="entityName"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.Join(System.String,System.String,System.String)">
            <summary>
            Join
            </summary>
            <param name="entityName"></param>
            <param name="alias"></param>
            <param name="onCondition"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.Join``1(MDF.Framework.Db.JoinType,System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="joinType"></param>
            <param name="alias"></param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.Select(System.String)">
            <summary>
            动态创建Select
            </summary>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.Select(System.String[])">
            <summary>
            构建Select
            </summary>
            <param name="prps"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.Where(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            where表达式
            </summary>
            <param name="where">表达式</param>
            <param name="paraValues">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.OrderBy(System.String)">
            <summary>
            组建OrderBy字句
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.HQLanguageBuild.GroupBy(System.String)">
            <summary>
            组建GroupBy字句
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.HQLanguageBuild.Query">
            <summary>
            Hql查询
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.HQLanguageBuild.IsAutoImportConfig">
            <summary>
            设置是否自动导入，True,查询时，实体明不用全名（带命名控件）
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.HQLanguageBuild.IsDistinct">
            <summary>
            是否IsDistinct
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.JoinType">
            <summary>
            Join类型
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.JoinType.innerJoin">
            <summary>
            内连接
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.JoinType.leftOutJoin">
            <summary>
            左连接
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.JoinType.rightOutJoin">
            <summary>
            右连接
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.EntityQuerySetting">
            <summary>
            域内模型查询
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.QuerySetting">
            <summary>
            查询设置
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.QuerySetting.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QuerySetting.DbName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QuerySetting.PageCount">
            <summary>
            每页最大数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QuerySetting.PageIndex">
            <summary>
            第几页
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.EntityQuerySetting.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.EntityQuerySetting.IsDistinct">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.EntityQuerySetting.EntityName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.EntityQuerySetting.Propertys">
            <summary>
            要查询的属性
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.EntityQuerySetting.OrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.EntityQuerySetting.Condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.HqlQuerySetting">
            <summary>
            Hql查询设置
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.HqlQuerySetting.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.HqlQuerySetting.QueryString">
            <summary>
            查询字符串
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.HqlQuerySetting.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.IDataBase">
            <summary>
            对应的数据库，如MES系统数据库，西门子数据库等其它数据库，支持Oracle、 SqlServer等数据库数据库
            每个数据库对应一个数据库配置文件
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-1-16 9:11</description></item>
            <item>修改<description></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MDF.Framework.Db.IDataBase.OpenSession">
            <summary>
            打开一个与数据库的会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDataBase.GetCurrentSession">
            <summary>
            打开一个与内容绑定Session
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDataBase.CloseCurrentSession">
            <summary>
            关闭当前Session
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.IDataBase.GetEnityType(System.String)">
            <summary>
            获取实体类型
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.IDatabaseService">
            <summary>
            数据库访问服务
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.IQueryServiceNode">
            <summary>
            数据查询节点
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.IQueryServiceNode.Query(MDF.Framework.Db.QuerySetting)">
            <summary>
            查询
            </summary>
            <param name="querySeting"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDatabaseService.GetObject``1(System.String,System.Object)">
            <summary>
            获取实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDatabaseService.Update(System.String,System.Object)">
            <summary>
            更新实体对象
            </summary>
            <param name="dbName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.IDatabaseService.Save(System.String,System.Object)">
            <summary>
            添加实体对象
            </summary>
            <param name="dbName"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDatabaseService.Delete(System.String,System.Object)">
            <summary>
            删除实体对象
            </summary>
            <param name="dbName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.IDatabaseService.SaveOrUpdate(System.String,System.Object)">
            <summary>
            保存或修改对象
            </summary>
            <param name="dbName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.IDatabaseService.BatchDelete(System.String,System.Collections.IList)">
            <summary>
            批量删除
            </summary>
            <param name="dbName"></param>
            <param name="objs"></param>
        </member>
        <member name="T:MDF.Framework.Db.IDbQuery">
            <summary>
            <c>IDbQuery</c>一次数据库操作，包括查询、调用存储过程、数据库的增、删、改操作
            </summary>
            <remarks>
            <list type="table">
            <item>新增<description>changhl,2012-1-16 8:57</description></item>
            <item>修改<description></description></item>
            </list>
            <example>创建操作<c>IDbQuery</c>
            <code>
            IDbQuery query = session.CreateSQLQuery("SELECT  * FROM pub.Materials m WHERE m.Name LIKE ?")
            IDbQuery insert = session.CreateSQLQuery("INSERT aut.UserPasswords(UserId,[PassWord])VALUES(?,?)")
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.List``1">
            <summary>
            查询结果,对配置实体对象映射的实体，可将数据转换为实体
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.List">
            <summary>
            查询结果，每一行为object[]类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.UniqueResult``1">
            <summary>
            单一结果
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.UniqueResult">
            <summary>
            单一结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.SetMaxResults(System.Int32)">
            <summary>
            设置查询结果行数
            </summary>
            <param name="maxResults"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.SetFirstResult(System.Int32)">
            <summary>
            设置查询结果的起始行
            </summary>
            <param name="firstResult"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.SetParameter(System.Int32,System.Object)">
            <summary>
            设置参数
            </summary>
            <param name="position">位置</param>
            <param name="val">参数值</param>
            <returns><see cref="T:MDF.Framework.Db.IDbQuery"/></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.SetParameter``1(System.Int32,``0)">
            <summary>
            设置参数
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="position">位置</param>
            <param name="val">参数值</param>
            <returns><see cref="T:MDF.Framework.Db.IDbQuery"/></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.SetParameter(System.String,System.Object)">
            <summary>
            根据参数名设置参数
            </summary>
            <param name="name">参数名</param>
            <param name="val">参数值</param>
            <returns><see cref="T:MDF.Framework.Db.IDbQuery"/></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.SetParameter``1(System.String,``0)">
            <summary>
            设置参数
            </summary>
            <typeparam name="T">参数值类型</typeparam>
            <param name="name">参数名称</param>
            <param name="val">参数值</param>
            <returns><see cref="T:MDF.Framework.Db.IDbQuery"/></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.SetParameterList(System.String,System.Collections.IEnumerable)">
            <summary>
            设置集合参数，对Sql语句中使用 in (a,b,c)
            </summary>
            <param name="name"></param>
            <param name="vals"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.Execute">
            <summary>
            执行Sql
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.IDbQuery.DataSet">
            <summary>
            返回DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.IDbQuery.QueryString">
            <summary>
            Sql查询字符串
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.IDbSession">
            <summary>
            一次数据库访问会话<c>IDbSession</c>,包括数据库操纵（增、删、改）、事务处理，创建数据库查询，支持Linq，本地Sql
            <c>IDbSession</c>非线程安全，<c>IDbSession</c>为数据库操作工作单元的基本单位，为避免并发引起的问题，<c>IDbSession</c>不作为状态变量，即类变量。
            <c>IDbSession</c>使用结束后，要调用<c>Close()</c>方法，关闭Session，释放数据库连接资源。
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-1-15 16:23</description></item>
            <item>修改</item>
            </list>
            <example>打开会话
            <code>
             IDataBase db;
             IDbSession session = db.OpenSession();
            </code>
            事务处理最佳实践
            <code>
             public void BussinessMethod()
               {
                   IDbSession session = db.OpenSession();
                   try
                   {
                       session.BeginTransAction();
                       session.Save(obj1);
                       session.Save(obj2);
                        session.Update(obj3);
                       session.Delete(obj4);
                       session.Commit();
                   }
                   catch (Exception ex)
                   {
                       session.Rollback();
                       throw;
                   }
                   finally 
                   {
                       session.Close();
                   }
               }
            </code>
            
            </example>
            </remarks>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Clear">
            <summary>
            清除缓存，Session自带缓存机制，如果缓存中有所需数据，直接从缓存中取得，不必多次访问
            数据库，但当数据库中数据更新时，无法获得最新数据，因此如果需重新从数据库中获取数据，需要清除缓存。
            对缓存的应用要根据具体情况使用
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Query``1">
             <summary>
             Linq数据查询，支持Linq语法，支持联合查询、分组、排序等
             </summary>
             <typeparam name="T"></typeparam>
             <returns></returns>
             <example> 查找物料名称包含"双喜"的所有物料
             <code>
             <![CDATA[
              IDbSession session = db.OpenSession();
              var result = (from r in session.Query<Material>()
                             where r.Name.Contains("双喜")
                             orderby r.Name
                             select r).ToList();
            ]]>
            </code>
             </example>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.CreateSQLQuery(System.String)">
            <summary>
            Sql语句查询，可执行Sql语句，可调用存储过程，包括增、删、改查，详见<see cref="T:MDF.Framework.Db.IDbQuery"/>
            </summary>
            <param name="queryString">sql语句</param>
            <returns><c>IDbQuery</c></returns>
            <remarks>
            <example>创建Sql语句查询
            <code>
               IDbQuery query1 = session.CreateSQLQuery("SELECT  * FROM pub.Materials m WHERE m.Name LIKE ?");
               IList result1 = query.SetParameter(0, "%双喜%").List();
            </code>
            <code>
             IDbQuery query2 = session.CreateSQLQuery("SELECT  * FROM pub.Materials m WHERE m.Name LIKE :Name");
             IList result2 = query.SetParameter("Name", "%双喜%").List();
             </code>
            </example>
            </remarks>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.GetNamedQuery(System.String)">
            <summary>
            根据配置的Sql语句节点获取查询
            </summary>
            <param name="queryName">配置的节点名称</param>
            <returns></returns>
            <remarks>
            <example>
            <code>
             <sql-query name="GetUserPassword">
               SELECT  * FROM aut.UserPasswords up WHERE up.UserId=:UserId
             </sql-query>
            </code>
             session.GetNamedQuery("GetUserPassword").SetParameter("UserId", "20120001").List();
            <code>
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.GetObject``1(System.Object)">
            <summary>
            根据主键获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Save(System.Object)">
            <summary>
            新增对象,前提已配置实体对象映射
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            对于单个对象的保存、修改，直接使用Save方法，如果保存多个对象，特别是循环保存对象，最后采用事务处理，共用一个Session
            </remarks>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.SaveOrUpdate(System.Object)">
            <summary>
            根据对象的主键配置，自动判定新增或修改对象到数据库
            </summary>
            <param name="obj">要保存的学徒</param>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Update(System.Object)">
            <summary>
            更新对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Delete(System.Object)">
            <summary>
            删除对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.BeginTransAction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Close">
            <summary>
            关闭连接，注意在Session处理完后，尽量关闭连接，以保证数据库连接资源的有效利用
            Session关闭后，不能重新打开，只能创建新的Session
            </summary>
            <returns></returns>
            <remarks>
            <example>执行完事务后，关闭Session
            <code>
              IDbSession session=db.OpenSession();
               try
               {
                   session.BeginTransAction();
                   session.Save(obj1);
                   session.Update(obj2);
                   session.Delete(obj3);
                   session.Commit();
               }
               catch (Exception ex)
               {
                   session.Rollback();
               }
               finally
               {
                   session.Close();
               }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.List``1(MDF.Framework.Db.QueryExpression)">
            <summary>
            根据查询表达式查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.List(MDF.Framework.Db.QueryExpression)">
            <summary>
            根据查询表达式查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.List``1(MDF.Framework.Db.HqlQuery)">
            <summary>
            根据查询表达式查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.List(MDF.Framework.Db.HqlQuery)">
            <summary>
            根据查询表达式查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.IDbSession.Flush">
            <summary>
            刷新Session
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.IDbSession.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.IDbSession.IsConnected">
            <summary>
            是否处于连接状态
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.IDbSession.IsOpen">
            <summary>
            是否打开状态
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.IHqlQuery">
            <summary>
            针对Nhibernate的Hql语法的查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.IHqlQuery.CreateHqlQuery(System.String)">
            <summary>
            根据Hql语句创建查询
            </summary>
            <param name="hql"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.Imp.AbstractQueryService`1">
            <summary>
            抽象的数据库查询服务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MDF.Framework.Db.Imp.AbstractQueryService`1.Query(MDF.Framework.Db.QuerySetting)">
            <summary>
            查询
            </summary>
            <param name="querySeting"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.AbstractQueryService`1.GetDbQuery(MDF.Framework.Db.IDbSession,`0,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            获取数据库查询
            </summary>
            <param name="session"></param>
            <param name="setting"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.AbstractQueryService`1.SetQueryParameters(MDF.Framework.Db.IDbQuery,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter})">
            <summary>
            设置查询参数
            </summary>
            <param name="query"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.AbstractQueryService`1.GetQueryString(System.String,System.Boolean,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{MDF.Framework.BaseQueryItem},System.String,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            获取查询字符串
            </summary>
            <param name="source"></param>
            <param name="isDistinct"></param>
            <param name="propertyNames"></param>
            <param name="conditions"></param>
            <param name="order"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.AbstractQueryService`1.GetSelectAllStr">
            <summary>
            获取选择字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.Imp.Database">
            <summary>
            数据库抽象<see cref="T:MDF.Framework.Db.IDataBase"/>
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-1016</description></item>
            </list>
            </remarks>    
        </member>
        <member name="M:MDF.Framework.Db.Imp.Database.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.Database.#ctor(System.String)">
            <summary>
            构造函数，根据配置文件配置数据库
            </summary>
            <param name="configXmlPath">配置文件路径</param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.Database.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="assemlyName"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.Database.OpenSession">
            <summary>
            创建一个数据库会话
            </summary>
            <returns><seealso cref="T:MDF.Framework.Db.IDbSession"/></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.Database.GetCurrentSession">
            <summary>
            获取当前会话，根据配置文件中Session
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.Database.CloseCurrentSession">
            <summary>
            关闭当前Session
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.Database.GetEnityType(System.String)">
            <summary>
            获取实体类型
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.Imp.Database.SessionFactory">
            <summary>
            SessionFactory
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Imp.DatabaseService">
            <summary>
            数据库访问服务
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DatabaseService.GetObject``1(System.String,System.Object)">
            <summary>
            根据对象Id获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DatabaseService.Update(System.String,System.Object)">
            <summary>
            更新对象
            </summary>
            <param name="dbName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DatabaseService.Save(System.String,System.Object)">
            <summary>
            保存对象
            </summary>
            <param name="dbName"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DatabaseService.Delete(System.String,System.Object)">
            <summary>
            删除对象
            </summary>
            <param name="dbName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DatabaseService.Query(MDF.Framework.Db.QuerySetting)">
            <summary>
            查询
            </summary>
            <param name="querySeting"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DatabaseService.SaveOrUpdate(System.String,System.Object)">
            <summary>
            保存或修改对象
            </summary>
            <param name="dbName"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DatabaseService.BatchDelete(System.String,System.Collections.IList)">
            <summary>
            批量删除
            </summary>
            <param name="dbName"></param>
            <param name="objs"></param>
        </member>
        <member name="P:MDF.Framework.Db.Imp.DatabaseService.QueryServiceNodes">
            <summary>
            查询服务集合
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Imp.DbQuery">
            <summary>
            一次查询
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-1-11</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:MDF.Framework.Db.Imp.DbQuery._query">
            <summary>
            IQuery
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.Imp.DbQuery._session">
            <summary>
            ISession
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.#ctor(NHibernate.ISession,NHibernate.IQuery)">
            <summary>
            构造函数
            </summary>
            <param name="session"></param>
            <param name="query"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.List``1">
            <summary>
            返回实体对象集
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.List">
            <summary>
            返回对象数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.UniqueResult``1">
            <summary>
            单一结果查询，返回实体
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.UniqueResult">
            <summary>
            单一结果查询，返回数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.SetMaxResults(System.Int32)">
            <summary>
            设置查询的最大个数
            </summary>
            <param name="maxResults"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.SetFirstResult(System.Int32)">
            <summary>
            设置首行数
            </summary>
            <param name="firstResult"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.SetParameter(System.Int32,System.Object)">
            <summary>
            设置查询参数
            </summary>
            <param name="position"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.SetParameter``1(System.Int32,``0)">
            <summary>
            设置查询参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="position"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.SetParameter(System.String,System.Object)">
            <summary>
            设置查询参数
            </summary>
            <param name="name"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.SetParameter``1(System.String,``0)">
            <summary>
            设置查询参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.SetParameterList(System.String,System.Collections.IEnumerable)">
            <summary>
            设置查询参数
            </summary>
            <param name="name"></param>
            <param name="vals"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.Execute">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.displace(System.String,System.String,System.String)">
            <summary>
            字符串替换
            </summary>
            <param name="myStr"></param>
            <param name="displaceA"></param>
            <param name="displaceB"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbQuery.DataSet">
            <summary>
            获取DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.Imp.DbQuery.QueryString">
            <summary>
            查询字符串
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Imp.AdapterFactory">
            <summary>
            适配器创建工厂
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.Imp.AdapterFactory.Creators">
            <summary>
            适配器创建者集合
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.AdapterFactory.GetCreator(System.String)">
            <summary>
            创建适配器
            </summary>
            <param name="connenctionName">数据库连接类型名称</param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.Imp.DbSession">
            <summary>
            数据库会话，<seealso cref="T:MDF.Framework.Db.IDbSession"/>
            </summary>
            <remarks>
            <list type="table">
            <item>创建<description>changhl,2013-1016</description></item>
            </list>
            </remarks>
                
        </member>
        <member name="F:MDF.Framework.Db.Imp.DbSession._session">
            <summary>
            Nhibernate Session
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.#ctor(NHibernate.ISession)">
            <summary>
            构造函数
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Query``1">
            <summary>
            Linq查询,<seealso cref="T:MDF.Framework.Db.IDbSession"/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.List``1(MDF.Framework.Db.QueryExpression)">
            <summary>
            根据查询表达式查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.List(MDF.Framework.Db.QueryExpression)">
            <summary>
            根据查询表达式查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.CreateQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,System.Int32)">
            <summary>
            创建查询
            </summary>
            <param name="queryString">Hql查询字符串</param>
            <param name="paras">参数</param>
            <param name="firstResult">首记录</param>
            <param name="maxResult">记录数</param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.CreateSQLQuery(System.String)">
            <summary>
            使用Sql语句进行查询
            </summary>
            <param name="queryString">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.GetNamedQuery(System.String)">
            <summary>
            根据配置Sql节点进行查询
            </summary>
            <param name="queryName"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.GetObject``1(System.Object)">
            <summary>
            根据对象主键获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Save(System.Object)">
            <summary>
            保存对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            如果当前Session开始了事务，则在保存后，不提交事务，如果当前Session未开始事务，认为是一次原子行操作，开始事务并提交
            </remarks>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Update(System.Object)">
            <summary>
            更新对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.SaveOrUpdate(System.Object)">
            <summary>
            根据对象的主键，自行判断保存或更新对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Delete(System.Object)">
            <summary>
            删除对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.BeginTransAction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Close">
            <summary>
            关闭Session
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Clear">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.List``1(MDF.Framework.Db.HqlQuery)">
            <summary>
            Hql查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.List(MDF.Framework.Db.HqlQuery)">
            <summary>
            Hql查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.Flush">
            <summary>
            刷新Session
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.System#IDisposable#Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.DbSession.CreateHqlQuery(System.String)">
            <summary>
            创建Hql查询
            </summary>
            <param name="hql"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.Imp.DbSession.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.Imp.DbSession.IsConnected">
            <summary>
            是否处于连接状态
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.Imp.DbSession.IsOpen">
            <summary>
            Session是否打开
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Imp.EntityQueryService">
            <summary>
            实体查询服务
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.EntityQueryService.GetDbQuery(MDF.Framework.Db.IDbSession,MDF.Framework.Db.EntityQuerySetting,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            获取查询
            </summary>
            <param name="session"></param>
            <param name="seting"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.Imp.HqlQueryService">
            <summary>
            Hql语句查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.HqlQueryService.GetDbQuery(MDF.Framework.Db.IDbSession,MDF.Framework.Db.HqlQuerySetting,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            获取查询
            </summary>
            <param name="session"></param>
            <param name="setting"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.Imp.ProcessQueryItemCollection">
            <summary>
            处理查询条件
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.ProcessQueryItemCollection.GetConditionString(System.Collections.Generic.IList{MDF.Framework.BaseQueryItem},System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            根据查询条件获取查询字符串
            </summary>
            <param name="items"></param>
            <param name="paraValues"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.ProcessQueryItemCollection.Parse(MDF.Framework.BaseQueryItem,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            解析查询条件
            </summary>
            <param name="item"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.Imp.SqlNodeQueryService">
            <summary>
            Sql命名节点查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.SqlNodeQueryService.GetDbQuery(MDF.Framework.Db.IDbSession,MDF.Framework.Db.SqlNodeQuerySetting,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            获取查询
            </summary>
            <param name="session"></param>
            <param name="setting"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.Imp.SqlQueryService">
            <summary>
            原生Sql查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.SqlQueryService.GetDbQuery(MDF.Framework.Db.IDbSession,MDF.Framework.Db.SqlQuerySetting,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            获取查询
            </summary>
            <param name="session"></param>
            <param name="setting"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.Imp.TableQueryService">
            <summary>
            按表查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Imp.TableQueryService.GetDbQuery(MDF.Framework.Db.IDbSession,MDF.Framework.Db.TableQuerySetting,System.Collections.Generic.IList{MDF.Framework.Db.DbParameter}@)">
            <summary>
            获取Db查询
            </summary>
            <param name="session"></param>
            <param name="setting"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Imp.TableQueryService.GetSelectAllStr">
            <summary>
            获取查找全部字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.LambdaQueryExpression`1">
            <summary>
            Lambda表达式查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.LambdaQueryExpression`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            获取LambdaQueryExpression表达式
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.LambdaQueryExpression`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取Where表达式
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.LambdaQueryExpression`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            获取Where表达式
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Db.QueryExpression">
            <summary>
            查询表达式,动态创建查询表达式，提供规则创建Hql语句
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.QueryExpression.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.QueryExpression.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="source"></param>
            <param name="alia"></param>
        </member>
        <member name="M:MDF.Framework.Db.QueryExpression.From(System.String,System.String)">
            <summary>
            构造From
            </summary>
            <param name="typeName"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.QueryExpression.Where(MDF.Framework.Db.CondtionJoinType,System.String,System.Object[])">
            <summary>
            组建where
            </summary>
            <param name="join"></param>
            <param name="conditonStr"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.QueryExpression.Join(System.String,System.String)">
            <summary>
            组建Join
            </summary>
            <param name="source"></param>
            <param name="ailas"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.QueryExpression.Select(System.String)">
            <summary>
            投影select
            </summary>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.QueryExpression.GroupBy(System.String)">
            <summary>
            分组
            </summary>
            <param name="groupByStr"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.QueryExpression.OrderBy(System.String)">
            <summary>
            排序
            </summary>
            <param name="orderByStr"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.sources">
            <summary>
            查询源(from..)
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.whereExpression">
            <summary>
            条件表达式where
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.joinExpression">
            <summary>
            连接表达式
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.selectExpression">
            <summary>
            投影表达式
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.orderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.groupBy">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.Expresion">
            <summary>
            表达式
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.MaxResults">
            <summary>
            最大数据量
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.FirstResult">
            <summary>
            首记录
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryExpression.WhereExpression">
            <summary>
            帅选表达式
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.SelectExpression">
            <summary>
            投影表达式
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.SelectExpression.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.SelectExpression.Add(System.String)">
            <summary>
            添加投影字段
            </summary>
            <param name="select"></param>
        </member>
        <member name="P:MDF.Framework.Db.SelectExpression.SelectFields">
            <summary>
            投影字段
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.SelectExpression.IsDistinct">
            <summary>
            是否包含重复值
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.SelectExpression.Expresion">
            <summary>
            投影表达式
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.FromExpresion">
            <summary>
            From表达式
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.FromExpresion.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.FromExpresion.AddSource(System.String,System.String)">
            <summary>
            添加查询条件
            </summary>
            <param name="source"></param>
            <param name="alia"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.FromExpresion.Sources">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.FromExpresion.Expresion">
            <summary>
            From表达式
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.WhereExpresion">
            <summary>
            Where表达式
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.WhereExpresion.whereStrs">
            <summary>
            where str
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.WhereExpresion.paraValues">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.WhereExpresion.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.WhereExpresion.Where(MDF.Framework.Db.CondtionJoinType,System.String,System.Object[])">
            <summary>
            where 表达式
            </summary>
            <param name="join"></param>
            <param name="where"></param>
            <param name="paraValues"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.WhereExpresion.Paras">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.WhereExpresion.Expresion">
            <summary>
            查询表达式
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.JoinExpresion">
            <summary>
            关联表达式
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.JoinExpresion.joinStrs">
            <summary>
            join表达式
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.JoinExpresion.On(System.String)">
            <summary>
            on
            </summary>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.JoinExpresion.Expresion">
            <summary>
            关联表达式
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.GroupExpresion">
            <summary>
            分组表达式
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.GroupExpresion.groupFields">
            <summary>
            分组字段
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.GroupExpresion.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.GroupExpresion.Add(System.String)">
            <summary>
            添加分组字段
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.GroupExpresion.Expresion">
            <summary>
            表达式
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.OrderExpresion">
            <summary>
            排序表达式
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.OrderExpresion.orderStrs">
            <summary>
            排序字符串
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.OrderExpresion.Add(System.String)">
            <summary>
            添加排序字段
            </summary>
            <param name="orderStr"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.OrderExpresion.Add(System.String,System.String)">
            <summary>
            添加排序字段
            </summary>
            <param name="field"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.OrderExpresion.Expresion">
            <summary>
            表达式
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.CondtionJoinType">
            <summary>
            条件连接类型
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.CondtionJoinType.And">
            <summary>
            and
            </summary>
        </member>
        <member name="F:MDF.Framework.Db.CondtionJoinType.Or">
            <summary>
            or
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.SqlNodeQuerySetting">
            <summary>
            sql节点查询
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.SqlNodeQuerySetting.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.SqlNodeQuerySetting.NodeName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.SqlNodeQuerySetting.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.SqlQuerySetting">
            <summary>
            sql 查询设置
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.SqlQuerySetting.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.TableQuerySetting">
            <summary>
            查询表
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.TableQuerySetting.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.TableQuerySetting.IsDistinct">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.TableQuerySetting.TableName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.TableQuerySetting.Columns">
            <summary>
            要查询的属性
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.TableQuerySetting.OrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.TableQuerySetting.Condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="T:MDF.Framework.ISequence">
            <summary>
            顺序接口
            </summary>
        </member>
        <member name="P:MDF.Framework.ISequence.Seq">
            <summary>
            顺序
            </summary>
        </member>
        <member name="T:MDF.Framework.IServiceInit">
            <summary>
            服务初始化接口
            </summary>
        </member>
        <member name="M:MDF.Framework.IServiceInit.Init">
            <summary>
            初始化方法
            </summary>
        </member>
        <member name="T:MDF.Framework.PropertyTemplate">
            <summary>
            属性模板
            </summary>
        </member>
        <member name="T:MDF.Framework.Entity">
            <summary>
            实体对象
            </summary>
        </member>
        <member name="T:MDF.Framework.IGetDisplayInfo">
            <summary>
            获取显示信息
            </summary>
        </member>
        <member name="M:MDF.Framework.IGetDisplayInfo.GetDisplayInfo">
            <summary>
            获取显示信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Entity.GetDisplayInfo">
            <summary>
            显示信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Entity.Cd">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:MDF.Framework.Entity.Ctrl">
            <summary>
            控制码
            </summary>
        </member>
        <member name="P:MDF.Framework.Entity.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Entity.IsUsed">
            <summary>
            是否在用
            </summary>
        </member>
        <member name="P:MDF.Framework.PropertyTemplate.DataSource">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:MDF.Framework.PropertyTemplate.ValuePath">
            <summary>
            值路径
            </summary>
        </member>
        <member name="P:MDF.Framework.PropertyTemplate.DisplayPath">
            <summary>
            显示路径
            </summary>
        </member>
        <member name="T:MDF.Framework.BaseQueryItem">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:MDF.Framework.BaseQueryItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.BaseQueryItem.ConnectSymbol">
            <summary>
            逻辑关系
            </summary>
        </member>
        <member name="T:MDF.Framework.QueryBlock">
            <summary>
            查询块
            </summary>
        </member>
        <member name="M:MDF.Framework.QueryBlock.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.QueryBlock.Items">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="T:MDF.Framework.IsOrNotNullQueryItem">
            <summary>
            是否为空的查询条件
            </summary>
        </member>
        <member name="P:MDF.Framework.IsOrNotNullQueryItem.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:MDF.Framework.IsOrNotNullQueryItem.IsNull">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:MDF.Framework.QueryConditionItem">
            <summary>
            查询条件
            </summary>
            QueryConditionItem
        </member>
        <member name="M:MDF.Framework.QueryConditionItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.QueryConditionItem.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:MDF.Framework.QueryConditionItem.Symbol">
            <summary>
            标识符(=,等)
            </summary>
        </member>
        <member name="P:MDF.Framework.QueryConditionItem.ParaName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:MDF.Framework.QueryConditionItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.QueryResult">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryResult.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.QueryResult.MaxRecords">
            <summary>
            最大记录数
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Repository.DbRepository">
            <summary>
            数据库访问基类
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Repository.IOperator">
            <summary>
            数据库操作
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Repository.ISessionManager">
            <summary>
            Session 管理
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.ISessionManager.BeginTransAction">
            <summary>
            开始事物
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.ISessionManager.Commit">
            <summary>
            提交事物
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.ISessionManager.Rollback">
            <summary>
            回滚事物
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.ISessionManager.Close">
            <summary>
            关闭Session
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IOperator.Save``1(``0)">
            <summary>
            保存对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IOperator.Update``1(``0)">
            <summary>
            更新对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IOperator.SaveOrUpdate``1(``0)">
            <summary>
            保存或更新对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IOperator.Delete``1(``0)">
            <summary>
            删除对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IOperator.Execute(System.String,System.Collections.Generic.List{MDF.Framework.Db.Repository.DbParameter})">
            <summary>
            执行Sql
            </summary>
            <param name="sql"></param>
            <param name="paras"></param>
        </member>
        <member name="T:MDF.Framework.Db.Repository.IService">
            <summary>
            数据库访问房屋
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IService.Get``1(System.Object)">
            <summary>
            根据主键获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IService.Query``1">
            <summary>
            查询
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IService.List``1">
            <summary>
            获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IService.List(System.String,System.Collections.Generic.IList{MDF.Framework.Db.Repository.DbParameter})">
            <summary>
            根据sql获取数据
            </summary>
            <param name="sql"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IService.List(System.String,System.Int32,System.Int32,MDF.Framework.Db.Repository.DbParameter[])">
            <summary>
            根据Sql查询
            </summary>
            <param name="sql"></param>
            <param name="first"></param>
            <param name="max"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IService.SqlNamedQuery(System.String,MDF.Framework.Db.Repository.DbParameter[])">
            <summary>
            根据配置的Sql节点获取数据
            </summary>
            <param name="sqlName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.IService.SqlNamedQuery(System.String,System.Int32,System.Int32,MDF.Framework.Db.Repository.DbParameter[])">
            <summary>
            根据配置的Sql节点获取数据
            </summary>
            <param name="sqlName"></param>
            <param name="first"></param>
            <param name="max"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Save``1(``0)">
            <summary>
            保存对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Update``1(``0)">
            <summary>
            更新对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.SaveOrUpdate``1(``0)">
            <summary>
            保存或更新对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Delete``1(``0)">
            <summary>
            删除对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Execute(System.String,System.Collections.Generic.List{MDF.Framework.Db.Repository.DbParameter})">
            <summary>
            执行Sql
            </summary>
            <param name="sql"></param>
            <param name="paras"></param>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Get``1(System.Object)">
            <summary>
            根据对象主键获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Query``1">
            <summary>
            Linq查询
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.List``1(MDF.Framework.Db.QueryExpression)">
            <summary>
            根据查询表达式查询对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expresion"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.List(MDF.Framework.Db.QueryExpression)">
            <summary>
            根据表达式查询
            </summary>
            <param name="expresion"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.List``1">
            <summary>
            获取所有对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.List(System.String,System.Collections.Generic.IList{MDF.Framework.Db.Repository.DbParameter})">
            <summary>
            根据Sql查询
            </summary>
            <param name="sql"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.BeginTransAction">
            <summary>
            开启事物
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Commit">
            <summary>
            提交事物
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Rollback">
            <summary>
            回滚事物
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.Close">
            <summary>
            关闭Session
            </summary>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.List(System.String,System.Int32,System.Int32,MDF.Framework.Db.Repository.DbParameter[])">
            <summary>
            sql查询
            </summary>
            <param name="sql"></param>
            <param name="first"></param>
            <param name="max"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.SqlNamedQuery(System.String,MDF.Framework.Db.Repository.DbParameter[])">
            <summary>
            根据命名Sql查询
            </summary>
            <param name="sqlName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Db.Repository.DbRepository.SqlNamedQuery(System.String,System.Int32,System.Int32,MDF.Framework.Db.Repository.DbParameter[])">
            <summary>
            命名Sql查询
            </summary>
            <param name="sqlName"></param>
            <param name="first"></param>
            <param name="max"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.Db.Repository.DbRepository.Db">
            <summary>
            Db
            </summary>
        </member>
        <member name="T:MDF.Framework.Db.Repository.DbParameter">
            <summary>
            数据库操作参数
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.Repository.DbParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:MDF.Framework.Db.Repository.DbParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:MDF.Framework.HierarchyTraceEventArgs`1">
            <summary>
            层级结构遍历事件
            </summary>
        </member>
        <member name="M:MDF.Framework.HierarchyTraceEventArgs`1.#ctor(MDF.Framework.HierarchyEnity{`0})">
            <summary>
            构造函数
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MDF.Framework.HierarchyTraceEventArgs`1.Node">
            <summary>
            遍历的节点
            </summary>
        </member>
        <member name="T:MDF.Framework.HierarchyEnity`1">
            <summary>
            层级类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MDF.Framework.HierarchyEnity`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MDF.Framework.HierarchyEnity`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造函数
            </summary>
            <param name="collections"></param>
        </member>
        <member name="M:MDF.Framework.HierarchyEnity`1.Find(System.Int32)">
            <summary>
            查找节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.HierarchyEnity`1.DfsTrace">
            <summary>
            深度优先遍历
            </summary>
        </member>
        <member name="M:MDF.Framework.HierarchyEnity`1.BfsTrace">
            <summary>
            广度优先遍历
            </summary>
        </member>
        <member name="M:MDF.Framework.HierarchyEnity`1.DfsTrace(MDF.Framework.HierarchyEnity{`0})">
            <summary>
            深度优先遍历
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MDF.Framework.HierarchyEnity`1.Visit(MDF.Framework.HierarchyEnity{`0})">
            <summary>
            访问
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MDF.Framework.HierarchyEnity`1.TypeLevel">
            <summary>
            层级编码
            </summary>
        </member>
        <member name="P:MDF.Framework.HierarchyEnity`1.Parent">
            <summary>
            父对象
            </summary>
        </member>
        <member name="P:MDF.Framework.HierarchyEnity`1.Childs">
            <summary>
            自对象
            </summary>
        </member>
        <member name="E:MDF.Framework.HierarchyEnity`1.OnTraceNode">
            <summary>
            遍历节点事件
            </summary>
        </member>
        <member name="T:MDF.Framework.HierarchyEnity">
            <summary>
            层级实体对象
            </summary>
        </member>
        <member name="T:MDF.Framework.Log.LogBase">
            <summary>
            写日志基类
            </summary>
        </member>
        <member name="M:MDF.Framework.Log.LogBase.Config">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="M:MDF.Framework.Log.LogBase.Config(System.String)">
            <summary>
            根据路径配置
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MDF.Framework.Log.LogBase.GetLog(System.Type)">
            <summary>
            获取Ilog
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.Log.LogBase.GetLog(System.String)">
            <summary>
            根据配置文件中的log名称获取log
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.Log.UserLogLayout">
            <summary>
            自定义输出格式
            </summary>
        </member>
        <member name="M:MDF.Framework.Log.UserLogLayout.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:MDF.Framework.Log.UserLogMessagePatternConverter">
            <summary>
            自定义信息转换
            </summary>
        </member>
        <member name="M:MDF.Framework.Log.UserLogMessagePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            转换信息
            </summary>
            <param name="writer"></param>
            <param name="loggingEvent"></param>
        </member>
        <member name="T:MDF.Framework.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:MDF.Framework.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:MDF.Framework.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:MDF.Framework.Properties.Resources._">
            <summary>
              查找类似 在集合【{0}】中未找到参数为【{0}】的值！ 的本地化字符串。
            </summary>
        </member>
        <member name="P:MDF.Framework.Properties.Resources.M_ExNullAugument">
            <summary>
              查找类似 参数【{0}】不能为空！ 的本地化字符串。
            </summary>
        </member>
        <member name="T:MDF.Framework.PropertySupport">
            <summary>
            提供用表达式选择获取属性名称的方法
            added by changhl,2012-7-12
            
            </summary>
        </member>
        <member name="M:MDF.Framework.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            根据表达式获取属性名称
            </summary>
            <typeparam name="T">对象类型.</typeparam>
            <param name="propertyExpression">属性表达式(e.g. p => p.PropertyName)</param>
            <returns>属性名称.</returns>
        </member>
        <member name="M:MDF.Framework.PropertySupport.ExtractProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            根据表达式获取MemberInfo
            </summary>
            <example>
            <code>
             string prpName =PropertySupport.ExtractPropertyName(() => this.Id);
            </code>
            </example>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.ReflectionHelp">
            <summary>
            反射帮助
            </summary>
        </member>
        <member name="M:MDF.Framework.ReflectionHelp.InvokeStaticMehtod(System.Type,System.String,System.Object[])">
            <summary>
            调用静态方法
            </summary>
            <param name="type">类型</param>
            <param name="methodInfo">方法名</param>
            <param name="paras">参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:MDF.Framework.ReflectionHelp.InvokeMethod(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            调用实例方法
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <param name="instance"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.ReflectionHelp.InvokeStaticMehtod(System.Type,System.String,System.Type,System.Object[])">
            <summary>
            调用静态方法
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <param name="GenericType"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.ReflectionHelp.InvokeMehtod(System.Type,System.String,System.Type,System.Object,System.Object[])">
            <summary>
            调用实例泛型方法
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <param name="GenericType"></param>
            <param name="instance"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.IRelation`1">
            <summary>
            关系
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MDF.Framework.IRelation`1.Pre">
            <summary>
            前序
            </summary>
        </member>
        <member name="P:MDF.Framework.IRelation`1.Next">
            <summary>
            后续
            </summary>
        </member>
        <member name="T:MDF.Framework.IRelation`2">
            <summary>
            关系
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:MDF.Framework.IRelation`2.Pre">
            <summary>
            关系1
            </summary>
        </member>
        <member name="P:MDF.Framework.IRelation`2.Next">
            <summary>
            关系2
            </summary>
        </member>
        <member name="T:MDF.Framework.Relation`1">
            <summary>
            关系
            </summary>
        </member>
        <member name="P:MDF.Framework.Relation`1.Pre">
            <summary>
            前序
            </summary>
        </member>
        <member name="P:MDF.Framework.Relation`1.Next">
            <summary>
            后续
            </summary>
        </member>
        <member name="T:MDF.Framework.Relation`2">
            <summary>
            对象关系
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:MDF.Framework.Relation`2.Pre">
            <summary>
            主体A
            </summary>
        </member>
        <member name="P:MDF.Framework.Relation`2.Next">
            <summary>
            主体B
            </summary>
        </member>
        <member name="T:MDF.Framework.ServiceInit">
            <summary>
            服务启动初始化
            </summary>
        </member>
        <member name="M:MDF.Framework.ServiceInit.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MDF.Framework.ServiceInit.InitList">
            <summary>
            服务启动初始化列表
            </summary>
        </member>
        <member name="T:MDF.Framework.TextOperator">
            <summary>
            获取拼音码
            </summary>
        </member>
        <member name="M:MDF.Framework.TextOperator.GetPYString(System.String)">
            <summary>
            获取拼音码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MDF.Framework.TextOperator.GetPYChar(System.String)">
            <summary>
            获取拼音码
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:MDF.Framework.UIAttribute">
            <summary>
            UI特性
            </summary>
        </member>
        <member name="P:MDF.Framework.UIAttribute.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:MDF.Framework.UserLogInfo">
            <summary>
            用户操作信息
            </summary>
        </member>
        <member name="M:MDF.Framework.UserLogInfo.#ctor">
            <summary>
            Construct
            </summary>
        </member>
        <member name="M:MDF.Framework.UserLogInfo.GetDefaultMessage">
            <summary>
            获取默认Message
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDF.Framework.UserLogInfo.UserName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="P:MDF.Framework.UserLogInfo.IpAddress">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="P:MDF.Framework.UserLogInfo.PageName">
            <summary>
            功能点名称
            </summary>
        </member>
        <member name="P:MDF.Framework.UserLogInfo.OperateName">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="P:MDF.Framework.UserLogInfo.Message">
            <summary>
            消息
            </summary>
        </member>
    </members>
</doc>
